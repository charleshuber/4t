package fr.metz.surfthevoid.tttt.rest.resources;

import java.io.Serializable;
import java.util.List;
import java.util.Map;

import javax.transaction.Transactional;
import javax.transaction.Transactional.TxType;

import org.springframework.util.CollectionUtils;

import fr.metz.surfthevoid.tttt.rest.db.entity.GenericDbo;
import fr.metz.surfthevoid.tttt.rest.db.repo.GenericDao;
import fr.metz.surfthevoid.tttt.rest.resources.Validator.ValidationException.Type;

@Transactional(TxType.REQUIRED)
public abstract class Validator<R extends Resource, T extends GenericDbo> {
	
	public void validate(R input, Operation op) throws ValidationException {
		if(input == null){
			throw new ValidationException(Type.INVALID_INPUT);
		}
		validateState(input, op);
		validateInput(input, op);
	}
	
	protected void validateState(R input, Operation op) throws ValidationException {
		if(op == Operation.CREATE && input.getId() != null){
			throw new ValidationException(Type.INVALID_STATE);
		} else if(op == Operation.UDPDATE){ 
			if(input.getId() == null){
				throw new ValidationException(Type.INVALID_STATE);
			} 
			GenericDbo dbo = getDao().read(input.getId());
			if(dbo == null){
				throw new ValidationException(Type.INVALID_STATE);
			}
		}
	}
	
	public void validateId(Long id) throws ValidationException {
		if(id == null || getDao().read(id) == null){
			throw new ValidationException(Type.NOT_FOUND);
		}
	}

	protected abstract void validateInput(R input, Operation op) throws ValidationException;
	protected abstract GenericDao<T> getDao();
	
	public static class ValidationException extends Exception {
		private static final long serialVersionUID = 6296828042739307519L;
		private Type type;
		private Errors errors;
		
		protected ValidationException(Type type){
			this.type = type;
		}
		public Type getType() {
			return type;
		}
		public void setType(Type type) {
			this.type = type;
		}
		public Errors getErrors() {
			return errors;
		}
		public void setErrors(Errors errors) {
			this.errors = errors;
		}
		public Boolean hasErrors(){
			return errors != null 
					&& !CollectionUtils.isEmpty(errors.getFieldsValidationMessages()) 
					&& !CollectionUtils.isEmpty(errors.getGlobalValidationMessages());
		}
		
		public static class Errors implements Serializable {
			private static final long serialVersionUID = 500707749913161248L;
			private Map<String, List<String>> fieldsValidationMessages;
			private List<String> globalValidationMessages;
			
			protected Errors(){}
			
			public Map<String, List<String>> getFieldsValidationMessages() {
				return fieldsValidationMessages;
			}
			public void setFieldsValidationMessages(Map<String, List<String>> fieldsValidationMessages) {
				this.fieldsValidationMessages = fieldsValidationMessages;
			}
			public List<String> getGlobalValidationMessages() {
				return globalValidationMessages;
			}
			public void setGlobalValidationMessages(List<String> globalValidationMessages) {
				this.globalValidationMessages = globalValidationMessages;
			}
		}
		
		public static enum Type {
			NOT_FOUND,
			INVALID_INPUT,
			INVALID_STATE,
			INVALID_INPUT_DATA
		}
	}
}
