package fr.metz.surfthevoid.tttt.rest.resources;

import javax.transaction.Transactional;
import javax.transaction.Transactional.TxType;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.ResponseBuilder;
import javax.ws.rs.core.Response.Status;

import org.apache.cxf.jaxrs.impl.ResponseBuilderImpl;
import org.springframework.security.access.AccessDeniedException;

import fr.metz.surfthevoid.tttt.rest.db.entity.GenericDbo;
import fr.metz.surfthevoid.tttt.rest.resources.ValidationException.Type;

@Transactional(TxType.NEVER)
public abstract class ResourceBoundary<R extends Resource> implements IResourceBoundary<R> {

	@Override
	public Response create(R resource) {
		
		
		OperationalInterface operation = input -> getStore().create(input);
		doOperate(resource, operation, Status.CREATED);
		
		
		
		ResponseBuilder rb = new ResponseBuilderImpl();
		try {
			R entity = getStore().create(resource);
			rb.status(Status.CREATED).entity(entity);
		} catch (ValidationException e) {
			if(e.getType() == Type.INVALID_RIGHT){
				rb.status(Status.FORBIDDEN);
			} else {
				rb.status(Status.BAD_REQUEST);
			}
			if(e.hasErrors()){
				rb.header(IResourceBoundary.VALIDATION_HEADER, true);
				rb.entity(e.getErrors());
			}
		} catch(AccessDeniedException e){
			rb.status(Status.FORBIDDEN);
		} catch (Exception e){
			rb.status(Status.INTERNAL_SERVER_ERROR);
		}
		return rb.build();
	}

	@Override
	public Response update(R resource) {
		// TODO Auto-generated method stub
		return null;
	}
	
	@Override
	public Response read(Long id) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Response delete(Long id) {
		// TODO Auto-generated method stub
		return null;
	}
	
	public <T> Response doOperate(T input, OperationalInterface operation, Status successStatus){
		ResponseBuilder rb = new ResponseBuilderImpl();
		try {
			Object entity = operation.operate(input);
			rb.status(successStatus).entity(entity);
		} catch (ValidationException e) {
			if(e.getType() == Type.INVALID_RIGHT){
				rb.status(Status.FORBIDDEN);
			} else {
				rb.status(Status.BAD_REQUEST);
			}
			if(e.hasErrors()){
				rb.header(IResourceBoundary.VALIDATION_HEADER, true);
				rb.entity(e.getErrors());
			}
		} catch(AccessDeniedException e){
			rb.status(Status.FORBIDDEN);
		} catch (Exception e){
			rb.status(Status.INTERNAL_SERVER_ERROR);
		}
		return rb.build();
	}
	
	protected abstract ResourceStore<R, ? extends GenericDbo> getStore();
	
	@FunctionalInterface
	private static interface OperationalInterface<T> {
		public Object operate(T arg) throws ValidationException;  
	}
}
